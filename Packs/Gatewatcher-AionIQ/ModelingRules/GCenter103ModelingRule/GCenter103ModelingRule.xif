[MODEL: dataset="gatewatcher_gcenter_raw"]
alter xdm.observer.name = observer_hostname,
  xdm.observer.version = observer_version,
  xdm.observer.unique_identifier = observer_uuid,
  xdm.observer.action = to_string(sigflow_signature_id),

  /* Mapping event */
  xdm.event.id = event_id,
  xdm.event.description = sigflow_signature,
  xdm.event.type = event_kind,
  xdm.event.operation_sub_type = event_module,
  xdm.event.original_event_type = event_kind,
  xdm.event.tags = arraycreate(XDM_CONST.EVENT_TAG_NETWORK, event_kind, to_string(sigflow_signature_id)),
  xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS,
  xdm.event.is_completed = True,
  xdm.event.log_level = if( 
    event_severity = 1, XDM_CONST.LOG_LEVEL_CRITICAL,
    event_severity = 2, XDM_CONST.LOG_LEVEL_ERROR,
    event_severity = 3, XDM_CONST.LOG_LEVEL_WARNING,
    event_severity = 4, XDM_CONST.LOG_LEVEL_INFORMATIONAL, 
    XDM_CONST.LOG_LEVEL_INFORMATIONAL),

  /* Mapping source (required for stitching) */
  xdm.source.host.mac_addresses = arraycreate(source_mac),
  xdm.source.ipv4 = source_ip,
  xdm.source.port = source_port,
  xdm.source.user_agent = http_http_user_agent,

  /* Mapping destination (required for stitching) */
  xdm.target.host.mac_addresses = arraycreate(destination_mac),
  xdm.target.ipv4 = destination_ip,
  xdm.target.port = destination_port,
  xdm.target.url = http_url,
  xdm.target.domain = if(network_protocol  = "http", http_hostname,  network_protocol = "dns", dns_answers->name),
  
  /* Mapping XDM IP protocol (required for stitching) */
  xdm.network.ip_protocol = if(network_transport ="udp", XDM_CONST.IP_PROTOCOL_UDP, network_transport="tcp", XDM_CONST.IP_PROTOCOL_TCP),
  xdm.network.application_protocol = if(network_protocol = "http", "web-browsing",
    network_protocol = "dns", "dns-base",
    network_protocol = "krb5", "kerberos"),
  xdm.network.rule = concat("#",to_string(sigflow_signature_id), "# ", sigflow_signature),
  
  /* Mapping DNS */
  xdm.network.dns.is_response = to_boolean(dns_qr),
  xdm.network.dns.dns_question.name = dns_answers->name,
  xdm.network.dns.dns_question.type = if(
    dns_answers->type = "A", XDM_CONST.DNS_RECORD_TYPE_A,
    dns_answers->type = "AAAA", XDM_CONST.DNS_RECORD_TYPE_AAAA,
    dns_answers->type = "PTR", XDM_CONST.DNS_RECORD_TYPE_PTR,
    dns_answers->type = "SRV", XDM_CONST.DNS_RECORD_TYPE_SRV,
    dns_answers->type = "MX", XDM_CONST.DNS_RECORD_TYPE_MX),

  /* Mapping HTTP */
  xdm.network.http.domain = http_hostname,
  xdm.network.http.method =  if(
    http_request->method = "ACL", XDM_CONST.HTTP_METHOD_ACL,
    http_request->method = "BASELINE_CONTROL", XDM_CONST.HTTP_METHOD_BASELINE_CONTROL, 
    http_request->method = "BIND", XDM_CONST.HTTP_METHOD_BIND,
    http_request->method = "CHECKIN", XDM_CONST.HTTP_METHOD_CHECKIN,
    http_request->method= "CHECKOUT", XDM_CONST.HTTP_METHOD_CHECKOUT, 
    http_request->method= "CONNECT", XDM_CONST.HTTP_METHOD_CONNECT, 
    http_request->method= "COPY", XDM_CONST.HTTP_METHOD_COPY, 
    http_request->method= "DELETE", XDM_CONST.HTTP_METHOD_DELETE, 
    http_request->method= "GET", XDM_CONST.HTTP_METHOD_GET, 
    http_request->method= "HEAD", XDM_CONST.HTTP_METHOD_HEAD, 
    http_request->method= "LABEL", XDM_CONST.HTTP_METHOD_LABEL, 
    http_request->method= "LINK", XDM_CONST.HTTP_METHOD_LINK, 
    http_request->method= "LOCK", XDM_CONST.HTTP_METHOD_LOCK, 
    http_request->method= "MERGE", XDM_CONST.HTTP_METHOD_MERGE, 
    http_request->method= "MKACTIVITY", XDM_CONST.HTTP_METHOD_MKACTIVITY, 
    http_request->method= "MKCALENDAR", XDM_CONST.HTTP_METHOD_MKCALENDAR, 
    http_request->method= "MKCOL", XDM_CONST.HTTP_METHOD_MKCOL, 
    http_request->method= "MKREDIRECTREF", XDM_CONST.HTTP_METHOD_MKREDIRECTREF, 
    http_request->method= "MKWORKSPACE", XDM_CONST.HTTP_METHOD_MKWORKSPACE, 
    http_request->method= "MOVE", XDM_CONST.HTTP_METHOD_MOVE, 
    http_request->method= "OPTIONS", XDM_CONST.HTTP_METHOD_OPTIONS, 
    http_request->method= "ORDERPATCH", XDM_CONST.HTTP_METHOD_ORDERPATCH, 
    http_request->method= "PATCH", XDM_CONST.HTTP_METHOD_PATCH, 
    http_request->method= "POST", XDM_CONST.HTTP_METHOD_POST, 
    http_request->method= "PRI", XDM_CONST.HTTP_METHOD_PRI, 
    http_request->method= "PROPFIND", XDM_CONST.HTTP_METHOD_PROPFIND, 
    http_request->method= "PROPPATCH", XDM_CONST.HTTP_METHOD_PROPPATCH, 
    http_request->method= "PUT", XDM_CONST.HTTP_METHOD_PUT, 
    http_request->method= "REBIND", XDM_CONST.HTTP_METHOD_REBIND, 
    http_request->method= "REPORT", XDM_CONST.HTTP_METHOD_REPORT, 
    http_request->method= "SEARCH", XDM_CONST.HTTP_METHOD_SEARCH, 
    http_request->method= "TRACE", XDM_CONST.HTTP_METHOD_TRACE, 
    http_request->method= "UNBIND", XDM_CONST.HTTP_METHOD_UNBIND, 
    http_request->method= "UNCHECKOUT", XDM_CONST.HTTP_METHOD_UNCHECKOUT, 
    http_request->method= "UNLINK", XDM_CONST.HTTP_METHOD_UNLINK, 
    http_request->method= "UNLOCK", XDM_CONST.HTTP_METHOD_UNLOCK, 
    http_request->method= "UPDATE", XDM_CONST.HTTP_METHOD_UPDATE, 
    http_request->method= "UPDATEREDIRECTREF", XDM_CONST.HTTP_METHOD_UPDATEREDIRECTREF, 
    http_request->method= "VERSION_CONTROL", XDM_CONST.HTTP_METHOD_VERSION_CONTROL, 
    http_request->method= null, null,
    to_string(http_request->method)),
  xdm.network.http.referrer = http_http_refer,
  xdm.network.http.response_code = http_response->status,
  xdm.network.http.url = http_url,

  /* Mapping TLS */
  xdm.network.tls.protocol_version = tls_version,
  xdm.network.tls.server_certificate.issuer = tls_server->issuer,
  xdm.network.tls.server_certificate.subject = tls_server->subject,
  xdm.network.tls.server_name = coalesce(tls_client->server_name, tls_sni),
  xdm.network.tls.server_ja3 = tls_ja3,
  
  /* Mapping KRB5*/
  xdm.auth.kerberos_tgt.msg_type = if(krb5_msg_type = "KRB_AS_REQ", XDM_CONST.KERBEROS_MSG_TYPE_AS_REQ,
    krb5_msg_type = "KRB_AS_REP", XDM_CONST.KERBEROS_MSG_TYPE_AS_REP),
  xdm.auth.kerberos_tgt.cname_values = if(krb5_msg_type in ("KRB_AS_REQ", "KRB_AS_REP") and krb5_cname != "<empty>", arraycreate(krb5_cname)),
  xdm.auth.kerberos_tgt.encryption_type = if(krb5_msg_type in ("KRB_AS_REQ", "KRB_AS_REP") and krb5_encryption = "rc4-hmac", XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RC4_HMAC,
    krb5_msg_type in ("KRB_AS_REQ", "KRB_AS_REP") and krb5_encryption = "aes256-cts-hmac-sha1-96", XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES256_CTS_HMAC_SHA1_96),
  xdm.auth.kerberos_tgt.error_code = if(krb5_msg_type = """""" and krb5_error_code = """""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_NONE,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_BADOPTION""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_BADOPTION,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_CERTIFICATE_MISMATCH""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CERTIFICATE_MISMATCH,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_CLIENT_NAME_MISMATCH""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CLIENT_NAME_MISMATCH,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_CLIENT_REVOKED""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_CLIENT_REVOKED,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_C_PRINCIPAL_UNKNOWN""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_C_PRINCIPAL_UNKNOWN,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_ETYPE_NOSUPP""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_ETYPE_NOSUPP,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_KEY_EXPIRED""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_KEY_EXPIRED,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_PREAUTH_FAILED""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PREAUTH_FAILED,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_PREAUTH_REQUIRED""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_PREAUTH_REQUIRED,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_S_PRINCIPAL_UNKNOWN""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_S_PRINCIPAL_UNKNOWN,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KDC_ERR_TGT_REVOKED""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_TGT_REVOKED,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KRB_AP_ERR_SKEW""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_SKEW,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KRB_AP_ERR_TKT_EXPIRED""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_AP_TKT_EXPIRED,
    krb5_msg_type = """KRB_ERROR""" and krb5_error_code = """KRB_ERR_RESPONSE_TOO_BIG""", XDM_CONST.KERBEROS_ERROR_CODE_ERR_KDC_RESPONSE_TOO_BIG),
  xdm.auth.kerberos_tgs.msg_type = if(krb5_msg_type = "KRB_TGS_REQ", XDM_CONST.KERBEROS_MSG_TYPE_TGS_REQ,
    krb5_msg_type = "KRB_TGS_REP", XDM_CONST.KERBEROS_MSG_TYPE_TGS_REP),
  xdm.auth.kerberos_tgs.cname_values = if(krb5_msg_type in ("KRB_TGS_REQ", "KRB_TGS_REP") and krb5_cname != "<empty>", arraycreate(krb5_cname)),
  xdm.auth.kerberos_tgs.spn_values = if(krb5_msg_type in ("KRB_TGS_REQ", "KRB_TGS_REP") and krb5_sname != "<empty>", arraycreate(krb5_sname)),
  xdm.auth.kerberos_tgs.encryption_type = if(krb5_msg_type in ("KRB_TGS_REQ", "KRB_TGS_REP") and krb5_encryption = "rc4-hmac", XDM_CONST.KERBEROS_ENCRYPTION_TYPE_RC4_HMAC,
    krb5_msg_type in ("KRB_TGS_REQ", "KRB_TGS_REP") and krb5_encryption = "aes256-cts-hmac-sha1-96", XDM_CONST.KERBEROS_ENCRYPTION_TYPE_AES256_CTS_HMAC_SHA1_96);